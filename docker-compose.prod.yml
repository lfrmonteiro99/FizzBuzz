# Production Docker Compose file

services:
  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./app:/var/www/app
      - ./docker/nginx/prod/default.conf:/etc/nginx/conf.d/default.conf.template
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - php
    networks:
      - symfony
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      /bin/sh -c "envsubst '$$APP_DOMAIN' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && 
      nginx -g 'daemon off;'"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile.prod
    restart: unless-stopped
    volumes:
      - app_var:/var/www/app/var
    depends_on:
      - mysql
    networks:
      - symfony
    healthcheck:
      test:
        [
          "CMD",
          "php",
          "-r",
          "if (file_get_contents('http://localhost/health') != 'ok') { exit(1); }",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - APP_ENV=prod
      - APP_SECRET=${APP_SECRET}
      - APP_DEBUG=${APP_DEBUG:-0}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - LOG_LEVEL=${LOG_LEVEL:-warning}
      - MONOLOG_LEVEL=${MONOLOG_LEVEL:-warning}
      - PHP_MEMORY_LIMIT=${PHP_MEMORY_LIMIT:-256M}
      - PHP_OPCACHE_ENABLE=${PHP_OPCACHE_ENABLE:-1}
      - PHP_OPCACHE_VALIDATE_TIMESTAMPS=${PHP_OPCACHE_VALIDATE_TIMESTAMPS:-0}
      - RUN_MIGRATIONS=${RUN_MIGRATIONS:-0}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  mysql:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      - symfony
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # No exposed ports in production for security
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  symfony:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  app_var:
    driver: local
